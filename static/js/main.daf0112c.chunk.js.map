{"version":3,"sources":["reducers.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","name","email","id","className","alt","src","CardList","filter","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","this","onRequestRobots","console","log","onSearchChange","filteredRobots","robot","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.daf0112c.chunk.js","sourcesContent":["import {\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_FAILED,\n    REQUEST_ROBOTS_SUCCESS,\n    CHANGE_SEARCH_FIELD\n} \nfrom './constants';\n\nconst initialStateSearch = {\n    searchField: ''\n};\n\nexport const searchRobots = (state=initialStateSearch , action={}) =>{\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({},state, { searchField: action.payload});\n        default:\n            return state;\n    }\n};\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n};\nexport const requestRobots = (state=initialStateRobots, action={}) =>{\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({},state,{isPending:true})\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({},state,{robots:action.payload,isPending:false})\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({},state,{error:action.payload})\n        default:\n            return state;\n    }\n}","import React from 'react';\n\n\nconst Card = ({name, email, id}) =>{\n    // const {name, email} = props;\n    return (\n    <div className='bg-light-blue dib br3 pa3 ma2 grow tc bw2 shadow-5'>\n         <img alt= 'img' src={`https://robohash.org/${id}?200x200`}/>\n        <div>\n            <h2>{name}</h2>\n            <p>{email}</p>\n        </div>\n    </div>\n    );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ({ filter, robots }) =>{\n    return (\n    <div>\n    {robots.map((user,i) =>{\n        return (<Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />)\n    })}\n    </div>\n    )\n};\n\nexport default CardList;\n\n","import React from \"react\";\n\n\nconst SearchBox = ({searchChange}) => {\n    return(<div > \n            <input \n             className='pa3 ba b--green tc bg-lightest-blue'\n             type='search' \n             placeholder='Search Contacts'\n             onChange={searchChange}\n              /> </div>)\n};\n\nexport default SearchBox; \n","import React from 'react';\n\nconst Scroll = (props) =>{\n\treturn (\n\t<div style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\n\t\t{props.children}\n\t</div>\n\t);\n};\n\n\nexport default Scroll;","import React, { Component } from 'react';\n// import {robots} from './robots';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\nimport {setSearchField, setRequestRobots} from '../actions';\n\n// parameter state comes from index.js provider store state(rootReducers)\nconst mapStateToProps = state => {\n    console.log('state',state);\n    return { \n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }  \n}\n\n\nconst mapDispatchToProps = (dispatch) => {  \n   return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(setRequestRobots())\n   }\n}\n\nclass App extends Component{\n    componentDidMount(){\n        this.props.onRequestRobots();\n    }\n    render(){    \n    console.log('this',this.props);    \n    const { searchField , onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot =>{ \n        return robot.name.toLowerCase().includes(searchField.toLowerCase()) \n    })\n\n    return isPending ?\n    <h1>loading</h1>:\n    (\n        <div className='tc'>    \n            <h1 className='f1'>Robot Contacts</h1>\n            <SearchBox searchChange={onSearchChange}/>\n            <Scroll>\n                <CardList robots={filteredRobots}/>\n            </Scroll>\n        </div>  \n        )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_FAILED,\n    REQUEST_ROBOTS_SUCCESS,\n    CHANGE_SEARCH_FIELD\n} \nfrom './constants';\n\nexport const setSearchField = (text) =>({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const setRequestRobots = () =>(dispatch) =>{\n    dispatch({type: REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response=>response.json())    \n    .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n    .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED,payload: error}))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\n\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\n\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware,combineReducers  } from 'redux';\nimport { searchRobots,requestRobots } from './reducers';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware  from 'redux-thunk'\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware,logger));\n\n\nReactDOM.render( <Provider store ={store}><App /></Provider>,\n                 document.getElementById('root'));\nconsole.log('store',store);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();  \n "],"sourceRoot":""}